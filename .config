# 选择目标平台为 Mediatek
CONFIG_TARGET_mediatek=y
# 选择目标平台的 CPU 型号为 MT7981
CONFIG_TARGET_mediatek_mt7981=y
# 启用多配置文件支持 (允许多个不同的固件配置)
CONFIG_TARGET_MULTI_PROFILE=y

# 选择目标设备为 Xiaomi Mi Router AX3000T
CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t=y
# 为 Xiaomi Mi Router AX3000T 设备指定要包含的软件包 (此处为空字符串，表示不包含任何特定软件包)
CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t=""

# 选择目标设备为 Xiaomi Mi Router AX3000T (Stock 固件版本)
CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t-stock=y
# 为 Xiaomi Mi Router AX3000T (Stock 固件版本) 设备指定要包含的软件包 (此处为空字符串，表示不包含任何特定软件包)
CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t-stock=""


CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t-an8855=y
CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t-an8855=""

CONFIG_TARGET_DEVICE_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t-an8855-stock=y
CONFIG_TARGET_DEVICE_PACKAGES_mediatek_mt7981_DEVICE_xiaomi_mi-router-ax3000t-an8855-stock=""


CONFIG_DEVEL=y
# 启用工具链选项 (允许自定义编译器选项)
CONFIG_TOOLCHAINOPTS=y
# 启用 Busybox 自定义配置 (允许选择要包含的 Busybox 功能)
CONFIG_BUSYBOX_CUSTOM=y
# 为每个设备构建单独的根文件系统
CONFIG_TARGET_PER_DEVICE_ROOTFS=y
# 启用 AF_ALG 更新 CTR IV
CONFIG_AFALG_UPDATE_CTR_IV=y
# 在 Busybox 中包含 blkid 命令
CONFIG_BUSYBOX_CONFIG_BLKID=y
# 在 Busybox 的 blkid 命令中启用类型检测功能
CONFIG_BUSYBOX_CONFIG_FEATURE_BLKID_TYPE=y
# 在 Busybox 中包含 volumeid 命令
CONFIG_BUSYBOX_CONFIG_VOLUMEID=y
# 启用网络接口自动启动
CONFIG_CONNINFRA_AUTO_UP=y
# 启用电磁干扰 (EMI) 支持
CONFIG_CONNINFRA_EMI_SUPPORT=y
# 禁用 GDB 调试器
# CONFIG_GDB is not set
# 启用包含配置文件
CONFIG_INCLUDE_CONFIG=y
# 在 JSON 概述中包含镜像信息
CONFIG_JSON_OVERVIEW_IMAGE_INFO=y
# 禁用内核块设备限速
# CONFIG_KERNEL_BLK_DEV_THROTTLING is not set
# 禁用内核 CFS 带宽控制
# CONFIG_KERNEL_CFS_BANDWIDTH is not set
# 启用内核 Cgroup 设备控制
CONFIG_KERNEL_CGROUP_DEVICE=y
# 启用内核 Cgroup 冻结器
CONFIG_KERNEL_CGROUP_FREEZER=y
# 启用内核设备内存分配
CONFIG_KERNEL_DEVMEM=y
# 禁用内核密钥管理
# CONFIG_KERNEL_KEYS is not set
# 禁用内核内存控制组 (Memcg) 交换
# CONFIG_KERNEL_MEMCG_SWAP is not set
# 启用内核网络分类器 Cgroup
CONFIG_KERNEL_NET_CLS_CGROUP=y
# 启用 Mediatek ACK CTS 超时支持
CONFIG_MTK_ACK_CTS_TIMEOUT_SUPPORT=y
# 启用 Mediatek 空气监控
CONFIG_MTK_AIR_MONITOR=y
# 启用 Mediatek A-MPDU 配置支持
CONFIG_MTK_AMPDU_CONF_SUPPORT=y
# 启用 Mediatek 天线控制支持
CONFIG_MTK_ANTENNA_CONTROL_SUPPORT=y
# 启用 Mediatek AP 客户端 (APCLI) 支持
CONFIG_MTK_APCLI_SUPPORT=y
# 启用 Mediatek 自动测试环境 (ATE) 支持
CONFIG_MTK_ATE_SUPPORT=y
# 启用 Mediatek 后台扫描支持
CONFIG_MTK_BACKGROUND_SCAN_SUPPORT=y
# 启用 Mediatek 校准二进制文件支持
CONFIG_MTK_CAL_BIN_FILE_SUPPORT=y
# 启用 Mediatek 配置支持 Falcon MURU
CONFIG_MTK_CFG_SUPPORT_FALCON_MURU=y
# 启用 Mediatek 配置支持 Falcon PP
CONFIG_MTK_CFG_SUPPORT_FALCON_PP=y
# 启用 Mediatek 配置支持 Falcon SR
CONFIG_MTK_CFG_SUPPORT_FALCON_SR=y
# 启用 Mediatek 配置支持 Falcon TXCMD 调试
CONFIG_MTK_CFG_SUPPORT_FALCON_TXCMD_DBG=y
# 选择 Mediatek 芯片型号为 MT7981
CONFIG_MTK_CHIP_MT7981=y
# 启用 Mediatek 连接基础设施 AP SoC
CONFIG_MTK_CONNINFRA_APSOC=y
# 启用 Mediatek 连接基础设施 AP SoC MT7981
CONFIG_MTK_CONNINFRA_APSOC_MT7981=y
# 启用 Mediatek 连接 WPS 支持
CONFIG_MTK_CON_WPS_SUPPORT=y
# 启用 Mediatek 双频并发 (DBDC) 模式
CONFIG_MTK_DBDC_MODE=y
# 启用 Mediatek 802.11k RRM 支持
CONFIG_MTK_DOT11K_RRM_SUPPORT=y
# 启用 Mediatek 802.11r 快速漫游 (FT) 支持
CONFIG_MTK_DOT11R_FT_SUPPORT=y
# 启用 Mediatek 802.11w 受保护管理帧 (PMF) 支持
CONFIG_MTK_DOT11W_PMF_SUPPORT=y
# 启用 Mediatek 802.11ax (HE) 支持
CONFIG_MTK_DOT11_HE_AX=y
# 启用 Mediatek 802.11n 支持
CONFIG_MTK_DOT11_N_SUPPORT=y
# 启用 Mediatek 802.11ac (VHT) 支持
CONFIG_MTK_DOT11_VHT_AC=y
# 启用 Mediatek 快速 NAT 支持
CONFIG_MTK_FAST_NAT_SUPPORT=y
# 将第一个网络接口的 EEPROM 存储在 Flash 中
CONFIG_MTK_FIRST_IF_EEPROM_FLASH=y
# 将第一个网络接口的 IP 地址分配给 IPAILNA
CONFIG_MTK_FIRST_IF_IPAILNA=y
# 将第一个网络接口设置为 MT7981
CONFIG_MTK_FIRST_IF_MT7981=y
# 启用 Mediatek 绿色 AP 支持
CONFIG_MTK_GREENAP_SUPPORT=y
# 启用 Mediatek 2.4GHz 频段 256QAM 支持
CONFIG_MTK_G_BAND_256QAM_SUPPORT=y
# 启用 Mediatek HDR 转换接收支持
CONFIG_MTK_HDR_TRANS_RX_SUPPORT=y
# 启用 Mediatek HDR 转换发送支持
CONFIG_MTK_HDR_TRANS_TX_SUPPORT=y
# 启用 Mediatek ICAP 支持
CONFIG_MTK_ICAP_SUPPORT=y
# 启用 Mediatek IGMP 侦听支持
CONFIG_MTK_IGMP_SNOOP_SUPPORT=y
# 启用 Mediatek 互通性 (Interworking)
CONFIG_MTK_INTERWORKING=y
# 启用 Mediatek MAP R2 版本支持
CONFIG_MTK_MAP_R2_VER_SUPPORT=y
# 启用 Mediatek MAP R3 版本支持
CONFIG_MTK_MAP_R3_VER_SUPPORT=y
# 启用 Mediatek MAP 支持
CONFIG_MTK_MAP_SUPPORT=y
# 启用 Mediatek MBSS DTIM 支持
CONFIG_MTK_MBSS_DTIM_SUPPORT=y
# 启用 Mediatek MBSS 支持
CONFIG_MTK_MBSS_SUPPORT=y
# 启用 Mediatek 组播特定速率
CONFIG_MTK_MCAST_RATE_SPECIFIC=y
# 启用 Mediatek 内存压缩
CONFIG_MTK_MEMORY_SHRINK=y
# 启用 Mediatek 积极内存压缩
CONFIG_MTK_MEMORY_SHRINK_AGGRESS=y
# 启用 Mediatek 管理帧发送功率控制
CONFIG_MTK_MGMT_TXPWR_CTRL=y
# 启用 Mediatek MLME 多队列支持
CONFIG_MTK_MLME_MULTI_QUEUE_SUPPORT=y
# 启用 Mediatek MT7981 新固件
CONFIG_MTK_MT7981_NEW_FW=y
# 将 Mediatek MT AP 支持编译为模块
CONFIG_MTK_MT_AP_SUPPORT=m
# 启用 Mediatek MT DFS 支持
CONFIG_MTK_MT_DFS_SUPPORT=y
# 启用 Mediatek MT MAC
CONFIG_MTK_MT_MAC=y
# 将 Mediatek MT WiFi 编译为模块
CONFIG_MTK_MT_WIFI=m
CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7672=y
CONFIG_MTK_MT_WIFI_FIRMWARE_PATH_MT7981="mt7981-fw-20240823"
CONFIG_MTK_MT_WIFI_MT7981_20240823=y
# 设置 Mediatek MT WiFi 路径
CONFIG_MTK_MT_WIFI_PATH="mt_wifi"

# 启用 Mediatek 多用户 MIMO (MU-MIMO) 支持
CONFIG_MTK_MUMIMO_SUPPORT=y
# 启用 Mediatek MU-RA 支持
CONFIG_MTK_MU_RA_SUPPORT=y
# 启用 Mediatek 离线信道扫描功能
CONFIG_MTK_OFFCHANNEL_SCAN_FEATURE=y
# 启用 Mediatek OWE 支持
CONFIG_MTK_OWE_SUPPORT=y
# 启用 Mediatek QoS R1 支持
CONFIG_MTK_QOS_R1_SUPPORT=y
# 启用 Mediatek RA 物理速率支持
CONFIG_MTK_RA_PHY_RATE_SUPPORT=y
# 启用 Mediatek RED 支持
CONFIG_MTK_RED_SUPPORT=y
# 启用 Mediatek RTMP Flash 支持
CONFIG_MTK_RTMP_FLASH_SUPPORT=y
# 将 Mediatek RT 第一张网卡的 EEPROM 设置为 Flash
CONFIG_MTK_RT_FIRST_CARD_EEPROM="flash"
# 设置 Mediatek RT 第一个网络接口的 RF 偏移量
CONFIG_MTK_RT_FIRST_IF_RF_OFFSET=0xc0000
# 启用 Mediatek SCS 固件卸载
CONFIG_MTK_SCS_FW_OFFLOAD=y
# 禁用 Mediatek 第二个网络接口
CONFIG_MTK_SECOND_IF_NONE=y
# 启用 Mediatek 智能载波侦听支持
CONFIG_MTK_SMART_CARRIER_SENSE_SUPPORT=y
# 启用 Mediatek 频谱支持
CONFIG_MTK_SPECTRUM_SUPPORT=y
# 启用 Mediatek OpenWrt 支持
CONFIG_MTK_SUPPORT_OPENWRT=y
# 禁用 Mediatek 第三个网络接口
CONFIG_MTK_THIRD_IF_NONE=y
# 启用 Mediatek TPC 支持
CONFIG_MTK_TPC_SUPPORT=y
# 启用 Mediatek TXBF 支持
CONFIG_MTK_TXBF_SUPPORT=y
# 启用 Mediatek UAPSD
CONFIG_MTK_UAPSD=y
# 启用 Mediatek VLAN 支持
CONFIG_MTK_VLAN_SUPPORT=y
# 启用 Mediatek VOW 支持
CONFIG_MTK_VOW_SUPPORT=y
# 启用 Mediatek WARP V2
CONFIG_MTK_WARP_V2=y
# 启用 Mediatek WDS 支持
CONFIG_MTK_WDS_SUPPORT=y
# 将 Mediatek WHNAT 支持编译为模块
CONFIG_MTK_WHNAT_SUPPORT=m
# 启用 Mediatek WiFi 基本功能
CONFIG_MTK_WIFI_BASIC_FUNC=y
# 启用 Mediatek WiFi 驱动程序
CONFIG_MTK_WIFI_DRIVER=y
# 启用 Mediatek WiFi EAP 功能
CONFIG_MTK_WIFI_EAP_FEATURE=y
# 启用 Mediatek WiFi 固件二进制文件加载
CONFIG_MTK_WIFI_FW_BIN_LOAD=y
# 将 Mediatek WiFi AP 模式编译为模块
CONFIG_MTK_WIFI_MODE_AP=m
# 启用 Mediatek WiFi MT MAC
CONFIG_MTK_WIFI_MT_MAC=y
# 启用 Mediatek WiFi TWT 支持
CONFIG_MTK_WIFI_TWT_SUPPORT=y
# 启用 Mediatek WLAN 钩子
CONFIG_MTK_WLAN_HOOK=y
# 启用 Mediatek WLAN 服务
CONFIG_MTK_WLAN_SERVICE=y
# 启用 Mediatek WNM 支持
CONFIG_MTK_WNM_SUPPORT=y
# 启用 Mediatek WPA3 支持
CONFIG_MTK_WPA3_SUPPORT=y
# 包含 Mediatek WSC
CONFIG_MTK_WSC_INCLUDED=y
# 启用 Mediatek WSC V2 支持
CONFIG_MTK_WSC_V2_SUPPORT=y
# 禁用 OpenSSL 内置引擎
# CONFIG_OPENSSL_ENGINE_BUILTIN is not set
# 禁用 OpenSSL 优先选择 ChaCha20-Poly1305 over AES-GCM
# CONFIG_OPENSSL_PREFER_CHACHA_OVER_GCM is not set
# 启用 OpenSSL NPN 支持
CONFIG_OPENSSL_WITH_NPN=y
# 禁用 Turbo ACC 流卸载
# CONFIG_PACKAGE_TURBOACC_INCLUDE_FLOW_OFFLOADING is not set
# 启用 Turbo ACC 无快速路径
CONFIG_PACKAGE_TURBOACC_INCLUDE_NO_FASTPATH=y
# 安装 blockd 软件包 (用于阻止广告和跟踪器)
CONFIG_PACKAGE_blockd=y
# 安装 CA 证书软件包 (提供可信的 SSL 证书)
CONFIG_PACKAGE_ca-certificates=y
# 安装 datconf 软件包 (用于配置网络接口)
CONFIG_PACKAGE_datconf=y
# 安装 datconf Lua 脚本软件包 (提供 Lua 脚本支持)
CONFIG_PACKAGE_datconf-lua=y
# 安装 ebtables 软件包 (用于以太网桥接防火墙)
CONFIG_PACKAGE_ebtables=y
# 安装 ethtool 软件包 (用于查询和控制网络接口)
CONFIG_PACKAGE_ethtool=y
# 安装 htop 软件包 (提供交互式进程查看器)
CONFIG_PACKAGE_htop=y
# 安装 ip-bridge 软件包 (用于配置网络桥接)
CONFIG_PACKAGE_ip-bridge=y
# 安装 ip6tables-extra 软件包 (提供额外的 IPv6 防火墙规则)
CONFIG_PACKAGE_ip6tables-extra=y
# 安装 ipset 软件包 (用于管理 IP 地址集合)
CONFIG_PACKAGE_ipset=y
# 安装 iptables-mod-conntrack-extra 软件包 (提供额外的连接跟踪模块)
CONFIG_PACKAGE_iptables-mod-conntrack-extra=y
# 安装 iptables-mod-extra 软件包 (提供额外的 iptables 模块)
CONFIG_PACKAGE_iptables-mod-extra=y
# 安装 iptables-mod-filter 软件包 (提供包过滤模块)
CONFIG_PACKAGE_iptables-mod-filter=y
# 安装 iptables-mod-hashlimit 软件包 (提供连接速率限制模块)
CONFIG_PACKAGE_iptables-mod-hashlimit=y
# 安装 iptables-mod-iface 软件包 (提供网络接口匹配模块)
CONFIG_PACKAGE_iptables-mod-iface=y
# 安装 iptables-mod-ipmark 软件包 (提供数据包标记模块)
CONFIG_PACKAGE_iptables-mod-ipmark=y
# 安装 iptables-mod-ipopt 软件包 (提供 IP 选项匹配模块)
CONFIG_PACKAGE_iptables-mod-ipopt=y
# 安装 iptables-mod-iprange 软件包 (提供 IP 地址范围匹配模块)
CONFIG_PACKAGE_iptables-mod-iprange=y
# 安装 iptables-mod-ipv4options 软件包 (提供 IPv4 选项匹配模块)
CONFIG_PACKAGE_iptables-mod-ipv4options=y
# 安装 iptables-mod-nat-extra 软件包 (提供额外的 NAT 模块)
CONFIG_PACKAGE_iptables-mod-nat-extra=y
# 安装 iptables-mod-proto 软件包 (提供协议匹配模块)
CONFIG_PACKAGE_iptables-mod-proto=y
# 安装 iptables-mod-tee 软件包 (提供数据包复制模块)
CONFIG_PACKAGE_iptables-mod-tee=y
# 安装 iptables-mod-tproxy 软件包 (提供透明代理模块)
CONFIG_PACKAGE_iptables-mod-tproxy=y
# 安装 iptables-mod-u32 软件包 (提供 u32 匹配模块)
CONFIG_PACKAGE_iptables-mod-u32=y
# 安装 iw 软件包 (用于配置无线网络接口)
CONFIG_PACKAGE_iw=y
# 安装 iwinfo 软件包 (用于获取无线网络接口信息)
CONFIG_PACKAGE_iwinfo=y
# 安装 kmod-ata-core 内核模块 (提供 ATA 控制器支持)
CONFIG_PACKAGE_kmod-ata-core=y
# 安装 kmod-conninfra 内核模块 (提供网络连接基础设施支持)
CONFIG_PACKAGE_kmod-conninfra=y
# 安装 kmod-crypto-acompress 内核模块 (提供压缩算法支持)
CONFIG_PACKAGE_kmod-crypto-acompress=y
# 安装 kmod-crypto-ccm 内核模块 (提供 CCM 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-ccm=y
# 安装 kmod-crypto-cmac 内核模块 (提供 CMAC 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-cmac=y
# 安装 kmod-crypto-crc32c 内核模块 (提供 CRC32C 校验和算法支持)
CONFIG_PACKAGE_kmod-crypto-crc32c=y
# 安装 kmod-crypto-ctr 内核模块 (提供 CTR 加密模式支持)
CONFIG_PACKAGE_kmod-crypto-ctr=y
# 安装 kmod-crypto-des 内核模块 (提供 DES 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-des=y
# 安装 kmod-crypto-gcm 内核模块 (提供 GCM 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-gcm=y
# 安装 kmod-crypto-gf128 内核模块 (提供 GF128 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-gf128=y
# 安装 kmod-crypto-ghash 内核模块 (提供 GHASH 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-ghash=y
# 安装 kmod-crypto-hmac 内核模块 (提供 HMAC 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-hmac=y
# 安装 kmod-crypto-md4 内核模块 (提供 MD4 哈希算法支持)
CONFIG_PACKAGE_kmod-crypto-md4=y
# 安装 kmod-crypto-md5 内核模块 (提供 MD5 哈希算法支持)
CONFIG_PACKAGE_kmod-crypto-md5=y
# 安装 kmod-crypto-rng 内核模块 (提供随机数生成器支持)
CONFIG_PACKAGE_kmod-crypto-rng=y
# 安装 kmod-crypto-seqiv 内核模块 (提供 SEQIV 加密算法支持)
CONFIG_PACKAGE_kmod-crypto-seqiv=y
# 安装 kmod-crypto-sha256 内核模块 (提供 SHA256 哈希算法支持)
CONFIG_PACKAGE_kmod-crypto-sha256=y
# 安装 kmod-crypto-sha512 内核模块 (提供 SHA512 哈希算法支持)
CONFIG_PACKAGE_kmod-crypto-sha512=y
# 安装 kmod-ebtables 内核模块 (提供 ebtables 支持)
CONFIG_PACKAGE_kmod-ebtables=y
# 安装 kmod-ebtables-ipv4 内核模块 (提供 IPv4 ebtables 支持)
CONFIG_PACKAGE_kmod-ebtables-ipv4=y
# 安装 kmod-ebtables-ipv6 内核模块 (提供 IPv6 ebtables 支持)
CONFIG_PACKAGE_kmod-ebtables-ipv6=y
# 安装 kmod-fs-autofs4 内核模块 (提供 AutoFS v4 支持)
CONFIG_PACKAGE_kmod-fs-autofs4=y
# 安装 kmod-fs-vfat 内核模块 (提供 FAT 文件系统支持)
CONFIG_PACKAGE_kmod-fs-vfat=y
# 安装 kmod-ifb 内核模块 (提供 Intermediate Functional Block 设备支持)
CONFIG_PACKAGE_kmod-ifb=y
# 安装 kmod-inet-diag 内核模块 (提供网络诊断工具支持)
CONFIG_PACKAGE_kmod-inet-diag=y
# 安装 kmod-ip6tables-extra 内核模块 (提供额外的 IPv6 防火墙规则)
CONFIG_PACKAGE_kmod-ip6tables-extra=y
# 安装 kmod-ipt-compat-xtables 内核模块 (提供 xtables 兼容性)
CONFIG_PACKAGE_kmod-ipt-compat-xtables=y
# 安装 kmod-ipt-conntrack-extra 内核模块 (提供额外的连接跟踪模块)
CONFIG_PACKAGE_kmod-ipt-conntrack-extra=y
# 安装 kmod-ipt-extra 内核模块 (提供额外的 iptables 模块)
CONFIG_PACKAGE_kmod-ipt-extra=y
# 安装 kmod-ipt-filter 内核模块 (提供包过滤模块)
CONFIG_PACKAGE_kmod-ipt-filter=y
# 安装 kmod-ipt-hashlimit 内核模块 (提供连接速率限制模块)
CONFIG_PACKAGE_kmod-ipt-hashlimit=y
# 安装 kmod-ipt-iface 内核模块 (提供网络接口匹配模块)
CONFIG_PACKAGE_kmod-ipt-iface=y
# 安装 kmod-ipt-ipmark 内核模块 (提供数据包标记模块)
CONFIG_PACKAGE_kmod-ipt-ipmark=y
# 安装 kmod-ipt-ipopt 内核模块 (提供 IP 选项匹配模块)
CONFIG_PACKAGE_kmod-ipt-ipopt=y
# 安装 kmod-ipt-iprange 内核模块 (提供 IP 地址范围匹配模块)
CONFIG_PACKAGE_kmod-ipt-iprange=y
# 安装 kmod-ipt-ipv4options 内核模块 (提供 IPv4 选项匹配模块)
CONFIG_PACKAGE_kmod-ipt-ipv4options=y
# 安装 kmod-ipt-nat-extra 内核模块 (提供额外的 NAT 模块)
CONFIG_PACKAGE_kmod-ipt-nat-extra=y
# 安装 kmod-ipt-offload 内核模块 (提供 iptables 卸载支持)
CONFIG_PACKAGE_kmod-ipt-offload=y
# 安装 kmod-ipt-proto 内核模块 (提供协议匹配模块)
CONFIG_PACKAGE_kmod-ipt-proto=y
# 安装 kmod-ipt-raw6 内核模块 (提供 IPv6 RAW 表支持)
CONFIG_PACKAGE_kmod-ipt-raw6=y
# 安装 kmod-ipt-tee 内核模块 (提供数据包复制模块)
CONFIG_PACKAGE_kmod-ipt-tee=y
# 安装 kmod-ipt-tproxy 内核模块 (提供透明代理模块)
CONFIG_PACKAGE_kmod-ipt-tproxy=y
# 安装 kmod-ipt-u32 内核模块 (提供 u32 匹配模块)
CONFIG_PACKAGE_kmod-ipt-u32=y
# 安装 kmod-lib-crc32c 内核模块 (提供 CRC32C 校验和算法库)
CONFIG_PACKAGE_kmod-lib-crc32c=y
# 安装 kmod-lib-lzo 内核模块 (提供 LZO 压缩算法库)
CONFIG_PACKAGE_kmod-lib-lzo=y
# 安装 kmod-mediatek_hnat 内核模块 (提供 Mediatek 硬件 NAT 支持)
CONFIG_PACKAGE_kmod-mediatek_hnat=y
# 安装 kmod-mt_wifi 内核模块 (提供 Mediatek WiFi 驱动程序)
CONFIG_PACKAGE_kmod-mt_wifi=y
# 安装 kmod-nf-flow 内核模块 (提供网络流信息支持)
CONFIG_PACKAGE_kmod-nf-flow=y
# 安装 kmod-nls-base 内核模块 (提供基本字符集支持)
CONFIG_PACKAGE_kmod-nls-base=y
# 安装 kmod-nls-cp437 内核模块 (提供 CP437 字符集支持)
CONFIG_PACKAGE_kmod-nls-cp437=y
# 安装 kmod-nls-iso8859-1 内核模块 (提供 ISO 8859-1 字符集支持)
CONFIG_PACKAGE_kmod-nls-iso8859-1=y
# 安装 kmod-nls-utf8 内核模块 (提供 UTF-8 字符集支持)
CONFIG_PACKAGE_kmod-nls-utf8=y
# 安装 kmod-sched-core 内核模块 (提供内核调度器支持)
CONFIG_PACKAGE_kmod-sched-core=y
# 安装 kmod-scsi-core 内核模块 (提供 SCSI 控制器支持)
CONFIG_PACKAGE_kmod-scsi-core=y
# 安装 kmod-tcp-bbr 内核模块 (提供 BBR TCP 拥塞控制算法支持)
CONFIG_PACKAGE_kmod-tcp-bbr=y
# 安装 kmod-tun 内核模块 (提供 TUN 虚拟网络接口支持)
CONFIG_PACKAGE_kmod-tun=y
# 安装 kmod-warp 内核模块 (提供 WARP 加速支持)
CONFIG_PACKAGE_kmod-warp=y
# 安装 kmod-zram 内核模块 (提供 zram 压缩内存块设备支持)
CONFIG_PACKAGE_kmod-zram=y
# 安装 kvcedit 软件包 (用于编辑 KVC 配置文件)
CONFIG_PACKAGE_kvcedit=y
# 安装 libatomic 软件包 (提供原子操作库)
CONFIG_PACKAGE_libatomic=y
# 安装 libblkid 软件包 (提供块设备识别库)
CONFIG_PACKAGE_libblkid=y
# 安装 libcap-ng 软件包 (提供功能(capabilities)操作库)
CONFIG_PACKAGE_libcap-ng=y
# 安装 libcbor 软件包 (提供 CBOR 数据格式编解码库)
CONFIG_PACKAGE_libcbor=y
# 安装 libevdev 软件包 (提供输入事件设备访问库)
CONFIG_PACKAGE_libevdev=y
# 安装 libfido2 软件包 (提供 FIDO2 身份验证库)
CONFIG_PACKAGE_libfido2=y
# 安装 libipset 软件包 (提供 IP 地址集合管理库)
CONFIG_PACKAGE_libipset=y
# 安装 libkvcutil 软件包 (提供 KVC 配置文件操作库)
CONFIG_PACKAGE_libkvcutil=y
# 安装 libncurses 软件包 (提供终端用户界面库)
CONFIG_PACKAGE_libncurses=y
# 安装 libnl 软件包 (提供 Netlink 通信库)
CONFIG_PACKAGE_libnl=y
# 安装 libnl-core 软件包 (提供 Netlink 核心库)
CONFIG_PACKAGE_libnl-core=y
# 安装 libnl-genl 软件包 (提供通用 Netlink 库)
CONFIG_PACKAGE_libnl-genl=y
# 安装 libnl-nf 软件包 (提供 Netfilter Netlink 库)
CONFIG_PACKAGE_libnl-nf=y
# 安装 libnl-route 软件包 (提供路由 Netlink 库)
CONFIG_PACKAGE_libnl-route=y
# 安装 libopenssl-afalg_sync 软件包 (提供 OpenSSL AF_ALG 同步操作库)
CONFIG_PACKAGE_libopenssl-afalg_sync=y
# 安装 libopenssl-devcrypto 软件包 (提供 OpenSSL 设备加密操作库)
CONFIG_PACKAGE_libopenssl-devcrypto=y
# 安装 libpcap 软件包 (提供网络数据包捕获库)
CONFIG_PACKAGE_libpcap=y
# 安装 libstdcpp 软件包 (提供 C++ 标准库)
CONFIG_PACKAGE_libstdcpp=y
# 安装 libudev-zero 软件包 (提供 udev 兼容库)
CONFIG_PACKAGE_libudev-zero=y
# 安装 libuuid 软件包 (提供 UUID 生成和操作库)
CONFIG_PACKAGE_libuuid=y
# 安装 lua-cjson 软件包 (提供 Lua 的 JSON 编解码库)
CONFIG_PACKAGE_lua-cjson=y
# 安装 luci-app-eqos-mtk 软件包 (提供 LuCI QoS 设置界面 for MTK)
CONFIG_PACKAGE_luci-app-eqos-mtk=y
# 安装 luci-app-mtwifi-cfg 软件包 (提供 LuCI MTK WiFi 配置界面)
CONFIG_PACKAGE_luci-app-mtwifi-cfg=y

CONFIG_PACKAGE_xl2tpd=y
CONFIG_PACKAGE_ppp-mod-l2tp=y
CONFIG_PACKAGE_kmod-pppol2tp=y
CONFIG_PACKAGE_luci-app-passwall=y

# 不包含 Haproxy 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Haproxy is not set
# 不包含 ShadowsocksR_Libev_Client 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_Libev_Client is not set
# 不包含 Shadowsocks_Libev_Client 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client is not set
# 不包含 Shadowsocks_Libev_Server 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server is not set
# 不包含 Shadowsocks_Rust_Client 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client is not set
# 不包含 Simple_Obfs 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Simple_Obfs is not set
# 不包含 Trojan_Plus 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan_Plus is not set
# 不包含 V2ray 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray is not set
# 不包含 V2ray_Plugin 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray_Plugin is not set
# 不包含 Xray 在 luci-app-passwall 中
# CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray is not set
# 不包含 rclone-ng 在 luci-app-rclone 中
# CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-ng is not set
# 不包含 rclone-webui 在 luci-app-rclone 中
# CONFIG_PACKAGE_luci-app-rclone_INCLUDE_rclone-webui is not set
# 不包含 ChinaDNS_NG 在 luci-app-ssr-plus 中
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ChinaDNS_NG is not set
# 不包含 V2RAY 在 luci-app-ssr-plus 中
CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_NONE_V2RAY=n
# 不包含 ShadowsocksR_Libev_Client 在 luci-app-ssr-plus 中
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Libev_Client is not set
# 包含 Shadowsocks_NONE_Client 在 luci-app-ssr-plus 中 
CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_NONE_Client=n
# 包含 Shadowsocks_NONE_Server 在 luci-app-ssr-plus 中 
CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_NONE_Server=n
# 不包含 Shadowsocks_Rust_Client 在 luci-app-ssr-plus 中
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Client is not set
# 不包含 Shadowsocks_Rust_Server 在 luci-app-ssr-plus 中
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Server is not set
# 不包含 Shadowsocks_Simple_Obfs 在 luci-app-ssr-plus 中
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Simple_Obfs is not set
# 不包含 Xray 在 luci-app-ssr-plus 中
# CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Xray is not set
# 安装 luci-app-turboacc-mtk 软件包 (提供 LuCI Turbo ACC 设置界面 for MTK)
CONFIG_PACKAGE_luci-app-turboacc-mtk=y
# 安装 luci-app-upnp 软件包 (提供 LuCI UPnP 设置界面)
CONFIG_PACKAGE_luci-app-upnp=y
# 不包含 ShadowsocksR_Libev_Server 在 luci-app-vssr 中
# CONFIG_PACKAGE_luci-app-vssr_INCLUDE_ShadowsocksR_Libev_Server is not set
# 不包含 Trojan 在 luci-app-vssr 中
# CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Trojan is not set
# 不包含 Xray 在 luci-app-vssr 中
# CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray is not set
# 不包含 Xray_plugin 在 luci-app-vssr 中
# CONFIG_PACKAGE_luci-app-vssr_INCLUDE_Xray_plugin is not set
# 安装 luci-i18n-eqos-mtk-zh-cn 软件包 (提供 LuCI QoS 设置界面 for MTK 的中文语言包)
CONFIG_PACKAGE_luci-i18n-eqos-mtk-zh-cn=y
# 安装 luci-i18n-mtwifi-cfg-zh-cn 软件包 (提供 LuCI MTK WiFi 配置界面的中文语言包)
CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y
# 安装 luci-i18n-turboacc-mtk-zh-cn 软件包 (提供 LuCI Turbo ACC 设置界面 for MTK 的中文语言包)
CONFIG_PACKAGE_luci-i18n-turboacc-mtk-zh-cn=y
# 安装 luci-i18n-upnp-zh-cn 软件包 (提供 LuCI UPnP 设置界面的中文语言包)
CONFIG_PACKAGE_luci-i18n-upnp-zh-cn=y
# 安装 luci-theme-argon 软件包 (提供 Argon 主题)
CONFIG_PACKAGE_luci-theme-argon=y
# 安装 luci-theme-bootstrap-mod 软件包 (提供 Bootstrap Mod 主题)
CONFIG_PACKAGE_luci-theme-bootstrap-mod=y
# 安装 mii_mgr 软件包 (提供 MII 管理工具)
CONFIG_PACKAGE_mii_mgr=y
# 安装 miniupnpd 软件包 (提供 UPnP 服务)
CONFIG_PACKAGE_miniupnpd=y
# 安装 mtkhqos_util 软件包 (提供 MTK QoS 工具)
CONFIG_PACKAGE_mtkhqos_util=y
# 安装 mtwifi-cfg 软件包 (提供 MTK WiFi 配置工具)
CONFIG_PACKAGE_mtwifi-cfg=y
# 安装 nano 软件包 (提供 Nano 文本编辑器)
CONFIG_PACKAGE_nano=n
# 安装 openssh-keygen 软件包 (提供 OpenSSH 密钥生成工具)
CONFIG_PACKAGE_openssh-keygen=y
# 安装 openssh-sftp-server 软件包 (提供 OpenSSH SFTP 服务器)
CONFIG_PACKAGE_openssh-sftp-server=y
# 安装 openssl-util 软件包 (提供 OpenSSL 工具)
CONFIG_PACKAGE_openssl-util=y
# 安装 regs 软件包 (提供寄存器访问工具)
CONFIG_PACKAGE_regs=y
# 安装 resolveip 软件包 (提供域名解析工具)
CONFIG_PACKAGE_resolveip=y
# 安装 swconfig 软件包 (提供软件交换机配置工具)
CONFIG_PACKAGE_swconfig=y
# 安装 switch 软件包 (提供交换机管理工具)
CONFIG_PACKAGE_switch=y
# 安装 tc-mod-iptables 软件包 (提供 iptables 的流量控制模块)
CONFIG_PACKAGE_tc-mod-iptables=y
# 安装 tc-tiny 软件包 (提供简单的流量控制工具)
CONFIG_PACKAGE_tc-tiny=y
# 安装 tcpdump 软件包 (提供网络数据包分析工具)
CONFIG_PACKAGE_tcpdump=y
# 安装 terminfo 软件包 (提供终端信息数据库)
CONFIG_PACKAGE_terminfo=y
# 安装 wifi-dats 软件包 (提供 WiFi 数据收集工具)
CONFIG_PACKAGE_wifi-dats=y
# 安装 wireless-regdb 软件包 (提供无线 regulatory 数据库)
CONFIG_PACKAGE_wireless-regdb=y
# 安装 wireless-tools 软件包 (提供无线网络工具)
CONFIG_PACKAGE_wireless-tools=y
# 安装 zram-swap 软件包 (提供 zram 交换空间管理工具)
CONFIG_PACKAGE_zram-swap=y
# 禁用软件包格式安全检查
# CONFIG_PKG_CHECK_FORMAT_SECURITY is not set
# 禁用 pkg-config FORTIFY_SOURCE 1
# CONFIG_PKG_FORTIFY_SOURCE_1 is not set
# 启用 pkg-config FORTIFY_SOURCE 2 (提供额外的安全检查)
CONFIG_PKG_FORTIFY_SOURCE_2=y
# 设置 WARP 芯片组为 MT7981
CONFIG_WARP_CHIPSET="mt7981"
# 启用 WARP 调试支持
CONFIG_WARP_DBG_SUPPORT=y
# 设置 WARP 版本为 2
CONFIG_WARP_VERSION=2
# 启用 WED 硬件 RRO 支持
CONFIG_WED_HW_RRO_SUPPORT=y
# 禁用 WolfSSL ECC25519 支持
# CONFIG_WOLFSSL_HAS_ECC25519 is not set
# 启用第一张网卡
CONFIG_first_card=y
# 设置第一张网卡名称为 MT7981
CONFIG_first_card_name="MT7981"
# 禁用 AF_ALG 回退
# CONFIG_AFALG_FALLBACK is not set
# 禁用 MTK 频段转向
# CONFIG_MTK_BAND_STEERING is not set
# 禁用 MTK 默认 5GHz 配置文件
# CONFIG_MTK_DEFAULT_5G_PROFILE is not set
# 禁用 MTK MAC 中继器支持
# CONFIG_MTK_MAC_REPEATER_SUPPORT is not set
# 禁用 MTK 多配置文件支持
# CONFIG_MTK_MULTI_PROFILE_SUPPORT is not set
# 禁用 MTK PCIe ASPM 动态控制支持
# CONFIG_MTK_PCIE_ASPM_DYM_CTRL_SUPPORT is not set
# 禁用 MTK 预校准 TRX SET1 支持
# CONFIG_MTK_PRE_CAL_TRX_SET1_SUPPORT is not set
# 禁用 MTK 预校准 TRX SET2 支持
# CONFIG_MTK_PRE_CAL_TRX_SET2_SUPPORT is not set
# 禁用 MTK RLM 校准缓存支持
# CONFIG_MTK_RLM_CAL_CACHE_SUPPORT is not set
# 禁用 MTK 嗅探器 Radiotap 支持
# CONFIG_MTK_SNIFFER_RADIOTAP_SUPPORT is not set
